import io
import zipfile
from datetime import datetime

import streamlit as st
from pydub import AudioSegment

# =============== C·∫§U H√åNH & STATE ===============
st.set_page_config(page_title="MP3 Fade In/Out Zipper", page_icon="üéß", layout="centered")

if "processing" not in st.session_state:
    st.session_state.processing = False  # ƒëang x·ª≠ l√Ω hay kh√¥ng

st.title("üéß MP3 Fade In/Out ‚Üí ZIP")
st.caption("Upload nhi·ªÅu file MP3, ƒë·∫∑t th·ªùi gian fade in/out, r·ªìi t·∫£i v·ªÅ 1 file ZIP.")

# =============== SIDEBAR: THI·∫æT L·∫¨P ===============
st.sidebar.header("Thi·∫øt l·∫≠p Fade")
fade_in_ms = int(st.sidebar.number_input("Fade In (ms)", min_value=0, max_value=120_000, value=2000, step=100))
fade_out_ms = int(st.sidebar.number_input("Fade Out (ms)", min_value=0, max_value=120_000, value=3000, step=100))
normalize = st.sidebar.checkbox("Normalize √¢m l∆∞·ª£ng (kh·ª≠ peak)", value=True)
target_bitrate = st.sidebar.selectbox("Bitrate xu·∫•t", ["128k", "192k", "256k", "320k"], index=3)
prefix_out = st.sidebar.text_input("Prefix t√™n file xu·∫•t", value="faded_")

st.sidebar.markdown("---")
st.sidebar.caption("upload to√†n b·ªô file l√™n, b·∫•m x·ª≠ l√Ω v√† file zip. Sau ƒë√≥ download")

# =============== UPLOAD ===============
uploaded_files = st.file_uploader("Ch·ªçn c√°c file MP3", type=["mp3"], accept_multiple_files=True)

# N√∫t x·ª≠ l√Ω: b·ªã disable khi ch∆∞a c√≥ file ho·∫∑c ƒëang x·ª≠ l√Ω
process_clicked = st.button(
    "X·ª≠ l√Ω & t·∫°o ZIP",
    disabled=(not uploaded_files) or st.session_state.processing,
)

# =============== H√ÄM PH·ª§ TR·ª¢ ===============
def safe_fade(segment: AudioSegment, fade_in_ms: int, fade_out_ms: int) -> AudioSegment:
    """
    ƒê·∫£m b·∫£o t·ªïng th·ªùi gian fade kh√¥ng v∆∞·ª£t qu√° ƒë·ªô d√†i track.
    N·∫øu v∆∞·ª£t, t·ª± co ng·∫Øn l·∫°i ƒë·ªÉ tr√°nh l·ªói.
    """
    length = len(segment)
    fi = min(fade_in_ms, max(0, length // 2))
    fo = min(fade_out_ms, max(0, length - fi))
    if fi + fo > length:
        extra = fi + fo - length
        fo = max(0, fo - extra)
        if fi + fo > length:
            fi = max(0, length - fo)
    return segment.fade_in(fi).fade_out(fo)

def normalize_peak(seg: AudioSegment, headroom_db: float = 1.0) -> AudioSegment:
    """
    H·∫° gain ƒë·ªÉ peak c√≤n ~ -headroom_db dBFS, tr√°nh clip.
    """
    try:
        if seg.max_dBFS > -headroom_db:
            change_db = -(seg.max_dBFS + headroom_db)
            return seg.apply_gain(change_db)
    except Exception:
        pass
    return seg

# =============== X·ª¨ L√ù ===============
if process_clicked:
    st.session_state.processing = True  # kh√≥a n√∫t ngay khi click

if st.session_state.processing:
    if not uploaded_files:
        st.warning("H√£y ch·ªçn √≠t nh·∫•t 1 file MP3.")
        st.session_state.processing = False
    else:
        zip_buffer = io.BytesIO()
        errors = []
        progress = st.progress(0, text="ƒêang x·ª≠ l√Ω...")
        log_area = st.empty()

        try:
            with st.spinner("ƒêang x·ª≠ l√Ω & n√©n ZIP..."):
                total = len(uploaded_files)
                with zipfile.ZipFile(zip_buffer, mode="w", compression=zipfile.ZIP_DEFLATED) as zf:
                    for idx, f in enumerate(uploaded_files, start=1):
                        try:
                            src = AudioSegment.from_file(f, format="mp3")
                            if normalize:
                                src = normalize_peak(src, headroom_db=1.0)
                            processed = safe_fade(src, fade_in_ms=fade_in_ms, fade_out_ms=fade_out_ms)

                            out_mp3 = io.BytesIO()
                            processed.export(out_mp3, format="mp3", bitrate=target_bitrate)
                            out_mp3.seek(0)

                            name = f.name if f.name.lower().endswith(".mp3") else f.name + ".mp3"
                            out_name = prefix_out + name
                            zf.writestr(out_name, out_mp3.read())

                            log_area.write(f"‚úî Xong: {f.name}")
                        except Exception as e:
                            err = f"‚ùå {f.name}: {e}"
                            errors.append(err)
                            log_area.write(err)

                        progress.progress(idx / total, text=f"ƒêang x·ª≠ l√Ω... ({idx}/{total})")

                zip_buffer.seek(0)
                now = datetime.now().strftime("%Y%m%d_%H%M%S")
                zip_name = f"mp3_faded_{now}.zip"

            st.success("Ho√†n t·∫•t! B·∫°n c√≥ th·ªÉ t·∫£i v·ªÅ file ZIP b√™n d∆∞·ªõi.")
            st.download_button(
                label="‚¨áÔ∏è T·∫£i ZIP",
                data=zip_buffer,
                file_name=zip_name,
                mime="application/zip",
            )
            if errors:
                with st.expander("Chi ti·∫øt l·ªói (n·∫øu c√≥)"):
                    for e in errors:
                        st.write(e)

        finally:
            # lu√¥n m·ªü kh√≥a d√π c√≥ l·ªói
            st.session_state.processing = False
            progress.empty()
